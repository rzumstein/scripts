#!/bin/bash

# Updates provided lambda environment variable value, while keeping the rest intact

# Usage: update-lambda-environment-variable <function-name> <variable-name> <variable-value> <aws region>
# Example: update-lambda-environment-variable my-function LOGGING_LEVEL INFO us-east-1

LAMBDA_FUNCTION=$1
ENVIRONMENT_VARIABLE_NAME=$2
ENVIRONMENT_VARIABLE_VALUE=$3
REGION=$4

if ! command -v python3 >/dev/null 2>&1; then
  echo "python3 not installed; exiting..."
  exit
fi

AWS_RESULT=$(
  aws lambda get-function-configuration \
    --function-name $LAMBDA_FUNCTION \
    --region $REGION \
    --output json \
    --query '[RevisionId','Environment.Variables]'
)

REVISION_ID=$(echo $AWS_RESULT | cut -c4-39)
ENVIRONMENT_VARIABLES=${AWS_RESULT:50}
ENVIRONMENT_VARIABLES=${ENVIRONMENT_VARIABLES%??}

NEW_ENVIRONMENT_VARIABLES=$(
  echo $ENVIRONMENT_VARIABLES \
    | python3 -c "import sys, json; obj=json.load(sys.stdin); obj['$ENVIRONMENT_VARIABLE_NAME']='$ENVIRONMENT_VARIABLE_VALUE'; print(obj)" \
    | sed "s/'/\"/g"
)

echo -e "Updating $LAMBDA_FUNCTION with the following environment variables:"
echo "$NEW_ENVIRONMENT_VARIABLES" | python3 -m json.tool

aws lambda update-function-configuration \
  --function-name $LAMBDA_FUNCTION \
  --environment "{ \"Variables\": $NEW_ENVIRONMENT_VARIABLES }" \
  --revision-id $REVISION_ID \
  --region $REGION \
    > /dev/null

