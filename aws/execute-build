#!/usr/bin/env bash

# Excecutes the specified build in CodeBuild

# Usage: execute-build <build name> <source version> <aws region>
# Example: execute-build MyBuild MyBranch us-east-1

# Optionally, any environment variables can be overridden as well
# by providing them as a comma-separated list after the region
# Example: execute-build MyBuild MyBranch us-east-1 var1=val1,var2=val2

BUILD_NAME=$1
SOURCE_VERSION=$2
REGION=$3
ENV_OVERRIDES=''

if [[ $REGION = '' ]]; then
  REGION='us-east-1'
fi

IFS=',' read -ra ENV_VARS <<< "$4"
for i in "${ENV_VARS[@]}"; do
  ENV_NAME=$(echo $i | cut -d "=" -f 1)
  ENV_VAL=$(echo $i | cut -d "=" -f 2)
  ENV_OVERRIDES="${ENV_OVERRIDES} name=${ENV_NAME},value=${ENV_VAL},type=PLAINTEXT"
done
ENV_OVERRIDES="${ENV_OVERRIDES:1}"

function mac_or_linux {
    if [ "$(uname)" = "Darwin" ]; then
        echo "mac"
    else
        echo "linux"
    fi
}

function is_batch_build {
    if [ "$(aws codebuild batch-get-projects --names $1 --output json --query projects[0].buildBatchConfig)" = "null" ]; then
        false
        return
    else
        true
        return
    fi
}

function get_build {
    echo "$(aws codebuild batch-get-builds --ids $1 --output json)"
}

function get_build_status {
    echo $1 \
        | grep buildStatus \
        | sed 's/.*"buildStatus": "//' \
        | sed 's/",.*$//'
}

function get_build_complete {
    echo $1 \
        | grep buildComplete \
        | sed 's/.*"buildComplete": //' \
        | sed 's/,.*$//'
}

function get_build_phase {
    echo $1 \
        | grep phaseType \
        | tail -1 \
        | sed 's/.*"phaseType": "//' \
        | sed 's/",.*$//'
}

function get_build_time {
    OS=$(mac_or_linux)
    START_TIME=$(echo $1 | grep startTime | sed 's/.*"startTime": //' | sed 's/\..*$//' | tr -d '"' | head -n 1)
    CUR_TIME=$(date +%s)
    if [[ "$OS" == "mac" ]]; then
        START_TIME=$(date -j -f "%Y-%m-%dT%H:%M:%S" $START_TIME +%s)
    else
        START_TIME=$(date -d $START_TIME +"%s")
    fi
    SECONDS_ELAPSED=$(($CUR_TIME - $START_TIME))
    MINUTES=$(($SECONDS_ELAPSED / 60))
    SECONDS=$(($SECONDS_ELAPSED - $MINUTES * 60))
    echo "${MINUTES}m ${SECONDS}s"
}

if is_batch_build "${BUILD_NAME}"; then
    if [[ $ENV_OVERRIDES = '' ]]; then
        BUILD_ID=$(aws codebuild start-build-batch \
          --project-name $BUILD_NAME \
          --source-version $SOURCE_VERSION \
          --region $REGION \
          --output text \
          --query buildBatch.id)
    else
        BUILD_ID=$(aws codebuild start-build-batch \
          --project-name $BUILD_NAME \
          --source-version $SOURCE_VERSION \
          --region $REGION \
          --environment-variables-override $ENV_OVERRIDES \
          --output text \
          --query buildBatch.id)
    fi
else
    if [[ $ENV_OVERRIDES = '' ]]; then
        BUILD_ID=$(aws codebuild start-build \
          --project-name $BUILD_NAME \
          --source-version $SOURCE_VERSION \
          --region $REGION \
          --output text \
          --query build.id)
    else
        BUILD_ID=$(aws codebuild start-build \
          --project-name $BUILD_NAME \
          --source-version $SOURCE_VERSION \
          --region $REGION \
          --environment-variables-override $ENV_OVERRIDES \
          --output text \
          --query build.id)
    fi
fi


echo -e "Build Started: ${BUILD_ID}\n"

BUILD=$(get_build "$BUILD_ID")
LAST_PHASE=""
LAST_UPDATE_TIME=0

while [[ "$(get_build_complete "$BUILD")" != "true" ]]; do
    BUILD=$(get_build "$BUILD_ID")
    CURRENT_PHASE=$(get_build_phase "$BUILD")
    if [[ "$CURRENT_PHASE" != "$LAST_PHASE" || "$(($(date +%s) - $LAST_UPDATE_TIME))" -gt 60 ]]; then
        echo "Build Status: $(get_build_status "$BUILD")"
        echo "Current Phase: $CURRENT_PHASE"
        echo -e "Time Elapsed: $(get_build_time "$BUILD")\n"
        LAST_PHASE=$CURRENT_PHASE
        LAST_UPDATE_TIME=$(date +%s)
    fi
    sleep 10
done

echo "Build Complete!"

